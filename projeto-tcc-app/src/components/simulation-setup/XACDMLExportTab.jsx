import React, { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Copy, Download, Save, CheckCircle, AlertTriangle } from 'lucide-react';
import { useToast } from "@/components/ui/use-toast";
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';

const XACDMLExportTab = ({ processId }) => {
  const { toast } = useToast();
  const [acdId, setAcdId] = useState(() => localStorage.getItem(`xacdml_acdId_${processId}`) || 'example.acd.id.001');
  const [generatedXACDML, setGeneratedXACDML] = useState('');
  const [isValidated, setIsValidated] = useState(null); // null, true, false

  useEffect(() => {
    localStorage.setItem(`xacdml_acdId_${processId}`, acdId);
  }, [acdId, processId]);

  const handleGenerateXACDML = async () => {
    try {
      const response = await fetch(`http://localhost:8080/xacdml/generate/${processId}?acdId=${acdId}`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
      });

      if (!response.ok) throw new Error("Error generating XACDML");

      const content = await response.text();
      setGeneratedXACDML(content);
      setIsValidated(null);

      toast({
        title: "Generation Completed",
        description: "XACDML successfully generated by the server!",
        variant: "default",
      });
    } catch (error) {
      console.error(error);
      toast({
        title: "Generation Error",
        description: "Could not generate XACDML.",
        variant: "destructive",
      });
    }
  };

  const handleCopy = () => {
    navigator.clipboard.writeText(generatedXACDML);
    toast({ title: "Copied!", description: "XACDML content copied to clipboard.", variant: "default" });
  };

  const handleDownload = () => {
    const blob = new Blob([generatedXACDML], { type: 'application/xml' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${acdId || 'process'}.xml`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    toast({ title: "Download Started", description: `Downloading ${acdId || 'process'}.xml`, variant: "default" });
  };

  const handleSaveXACDML = () => {
    toast({
      title: "Save XACDML",
      description: "ðŸš§ This feature (saving to server/storage) is not implemented yet.",
      variant: "default",
    });
  };

  const handleValidateXACDML = () => {
    toast({
      title: "XACDML Validation",
      description: "Simulating XACDML validation (real validation not implemented yet).",
      variant: "default",
    });
    const isValid = Math.random() > 0.3;
    setIsValidated(isValid);
    if (isValid) {
      toast({ title: "Validation Completed", description: "XACDML seems valid!", variant: "default", className: "bg-green-500 text-white" });
    } else {
      toast({ title: "Validation Failed", description: "Problems were found in XACDML.", variant: "destructive" });
    }
  };

  return (
      <Card className="bg-slate-800 border-slate-700 text-slate-50">
        <CardHeader>
          <CardTitle className="text-2xl text-sky-400">XACDML Export</CardTitle>
          <CardDescription className="text-slate-400">
            Generate and export the XACDML representation of your process.
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-6">

          <div className="flex items-end gap-3">
            <div className="w-1/3">
              <Label htmlFor="acdId" className="text-slate-300">ACD ID</Label>
              <Input
                  id="acdId"
                  value={acdId}
                  onChange={(e) => setAcdId(e.target.value)}
                  placeholder="e.g., com.example.myprocess"
                  className="bg-slate-700 border-slate-600 text-slate-50 placeholder:text-slate-500"
              />
            </div>
            <Button
                type="button"
                onClick={handleGenerateXACDML}
                className="bg-sky-500 hover:bg-sky-600 text-white h-[42px]"
            >
              Generate XACDML
            </Button>
          </div>

          {/* XACDML Output */}
          <div>
            <Label htmlFor="xacdmlOutput" className="text-slate-300">XACDML Output (Read-only)</Label>
            <Textarea
                id="xacdmlOutput"
                value={generatedXACDML}
                readOnly
                rows={15}
                className="bg-slate-900 border-slate-700 text-slate-300 font-mono text-sm resize-none"
            />
          </div>

          {/* Actions */}
          <div className="flex flex-wrap gap-3 items-center">
            <Button variant="outline" onClick={handleCopy} className="text-sky-400 border-sky-400 hover:bg-sky-400 hover:text-slate-900">
              <Copy className="mr-2 h-4 w-4" /> Copy
            </Button>
            <Button variant="outline" onClick={handleDownload} className="text-sky-400 border-sky-400 hover:bg-sky-400 hover:text-slate-900">
              <Download className="mr-2 h-4 w-4" /> Download
            </Button>
            <Button variant="outline" onClick={handleSaveXACDML} className="text-green-400 border-green-400 hover:bg-green-400 hover:text-slate-900">
              <Save className="mr-2 h-4 w-4" /> Save XACDML
            </Button>
            <Button variant="outline" onClick={handleValidateXACDML} className={`
            ${isValidated === true ? 'text-green-400 border-green-400 hover:bg-green-400' :
                isValidated === false ? 'text-red-400 border-red-400 hover:bg-red-400' :
                    'text-yellow-400 border-yellow-400 hover:bg-yellow-400'} 
            hover:text-slate-900 flex items-center
          `}>
              {isValidated === true && <CheckCircle className="mr-2 h-4 w-4" />}
              {isValidated === false && <AlertTriangle className="mr-2 h-4 w-4" />}
              {isValidated === null && <AlertTriangle className="mr-2 h-4 w-4 opacity-50" />}
              Validate XACDML
            </Button>
          </div>

          {/* Validation messages */}
          {isValidated === true && <p className="text-sm text-green-400">XACDML validated successfully!</p>}
          {isValidated === false && <p className="text-sm text-red-400">XACDML contains errors. Please check the structure.</p>}
        </CardContent>
      </Card>
  );
};

export default XACDMLExportTab;
